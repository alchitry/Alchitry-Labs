/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************

   Reset Conditioner: This module takes an active high asynchronous reset input
   and synchronizes the falling edge so that the entire FPGA will come out of
   reset at the same time. Failure to condition an asynchronous reset can cause
   your design to not work after a reset.
   
   This module works by using a chain of flip flops with the first connected to 
   0. The reset input is fed to each of the flip-flops and when active forces
   them to be high. Once the reset input falls, the 0 value will move through
   the chain. After STAGES clock cycles have passed, the output will be low.
   STAGES will determine the minimum reset pulse width. The default is sufficient
   for most applications.
*/

module reset_conditioner #(
    STAGES = 4 : STAGES > 1 // number of stages
  )(
    input clk,  // clock
    input in,   // async reset
    output out  // snyc reset
  ) {
  
  dff stage[STAGES] (.clk(clk), .rst(in), #INIT(STAGESx{1}));

  always {
    stage.d = c{stage.q[STAGES-2:0],0};
    out = stage.q[STAGES-1];
  }
}
