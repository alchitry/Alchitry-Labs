/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

module spi_slave #(
    // clock polarity, 0 = inactive low, 1 = inactive high
    CPOL = 0 : CPOL == 0 || CPOL == 1,
    
    // clock phase, 0 = valid on leading edge, 1 = valid on trailing edge
    CPHA = 0 : CPHA == 0 || CPHA == 1
  )(
    input clk,          // clock
    input rst,          // reset
    input ss,           // SPI slave select
    input mosi,         // SPI MOSI
    output miso,        // SPI MISO
    input sck,          // SPI SCK
    output done,        // transfer done
    input data_in[8],   // data to send
    output data_out[8]  // data received
  ) {
  
  .clk(clk) {
    .rst(rst) {
      dff bit_ct[3];     // bit counter
      dff data[8];       // received data
    }
    dff mosi_reg;        // mosi buffer
    dff miso_reg;        // miso buffer
    dff sck_reg[2];      // sck buffer
    dff ss_reg;          // ss buffer
    dff data_out_reg[8]; // data_out buffer
    dff done_reg;        // done buffer
  }
  
  always {
    // connect to buffer output
    miso = miso_reg.q;
    done = done_reg.q;
    data_out = data_out_reg.q;
    
    // read in buffered inputs
    ss_reg.d = ss;
    mosi_reg.d = mosi;
    sck_reg.d = c{sck_reg.q[0], sck}; // save old sck
    
   done_reg.d = 0; // default to not done
    
    if (ss_reg.q) { // not selected
      bit_ct.d = 3b111;        // reset counter
      data.d = data_in;        // copy in data for next byte
      miso_reg.d = data_in[7]; // write first bit out
    } else {
      // When CPOL and CPHA are different, we read on the falling edge.
      // When they are the same we read on the rising edge.
      // Therefore we can use XOR to check that and invert the
      // edge detector. If you XOR with 1, the bit is flipped. 
      
      if (sck_reg.q == (b01 ^ 2x{CPOL[0]^CPHA[0]})) { // reading edge
        
        // read in the bit
        data_out_reg.d[bit_ct.q] = mosi_reg.q;
        
        // increment the bit counter
        bit_ct.d = bit_ct.q - 1;
        
        // if we read the last bit
        if (bit_ct.q == b0) {
          done_reg.d = 1;   // signal we are done
          data.d = data_in; // copy new data in
        }
      } else if (sck_reg.q == (b10 ^ 2x{CPOL[0]^CPHA[0]})) { // writing edge
        // write a bit out
        miso_reg.d = data.q[bit_ct.q];
      }
    }
  }
}