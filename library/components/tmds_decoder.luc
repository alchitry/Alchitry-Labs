/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

module tmds_decoder (
    input rst,  // reset
    input pclk,
    input pclkx2,
    input pclkx10,
    input strobe,
    input data_p,
    input data_n,
    input others_valid,
    input others_ready,
    output valid,
    output ready,
    output c0,
    output c1,
    output de,
    output data[8]
  ) {
  
  serdes_1_to_5 des (.gclk(pclkx2), .ioclk(pclkx10), .rst(rst));
  
  
  .clk(pclk){
    .rst(rst) {
      bit_align bit_align;
      dff c[2];
      dff data_enabled;
      dff data_out[8];
    }
    
    channel_align channel_align;
  }
  
  .clk(pclkx2) {
    dff flipx2;
    dff bitslipx2[2];
    dff saved_data[5];
    dff raw_data[10];
    
    .rst(rst) {
      dff toggle;
    }
  }
  
  sig flipped_data[8];
  var i;
  
  always {
    valid = bit_align.aligned;
    ready = channel_align.ready;
    
    des.data_n = data_n;
    des.data_p = data_p;
    des.strobe = strobe;
    bitslipx2.d[0] = bit_align.bitslip;
    bitslipx2.d[1] = !bitslipx2.q[0] & bit_align.bitslip;
    des.bitslip = bitslipx2.q[1];
    
    saved_data.d = des.data;
    flipx2.d = bit_align.flip;
    toggle.d = ~toggle.q;
    
    if (toggle.q ^ flipx2.q)
      raw_data.d = c{des.data, saved_data.q};
    
    bit_align.data = raw_data.q;
    
    channel_align.others_ready = others_ready;
    channel_align.data_valid = others_valid & bit_align.aligned;
    channel_align.data_in = raw_data.q;
    
    c0 = c.q[0];
    c1 = c.q[1];
    de = data_enabled.q;
    data = data_out.q;
    
    flipped_data = channel_align.data_out[9] ? ~channel_align.data_out[7:0] : channel_align.data_out[7:0];
    
    if (others_ready && channel_align.ready) {
      case (channel_align.data_out) {
        Dvi.CTRLTOKEN0:
          c.d = 2b00;
          data_enabled.d = 0;
        Dvi.CTRLTOKEN1:
          c.d = 2b01;
          data_enabled.d = 0;
        Dvi.CTRLTOKEN2:
          c.d = 2b10;
          data_enabled.d = 0;
        Dvi.CTRLTOKEN3:
          c.d = 2b11;
          data_enabled.d = 0;
        default:
          data_enabled.d = 1;
          
          data_out.d[0] = flipped_data[0];
          for (i = 1; i < 8; i++)
            data_out.d[i] = channel_align.data_out[8] ? (flipped_data[i] ^ flipped_data[i-1]) : (flipped_data[i] ~^ flipped_data[i-1]);
      }
    }
  }
}