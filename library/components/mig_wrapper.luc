/******************************************************************************
   
   The MIT License (MIT)
   
   Copyright (c) 2019 Alchitry
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   
   *****************************************************************************
   
   This is a wrapper for the DDR3 MIG from Xilinx. It wraps the interface into two
   structs to make assignments easier and interfaces cleaner.

   It requires that you have a MIG generated in your project with the name
   mig_7series_0. This can be created by going to Project->Add Memory Controller.
*/

global Memory {
  struct in {
    addr[28],
    cmd[3],
    en,
    wr_data[128],
    wr_en,
    wr_mask[16]
  }
  
  struct out {
    rd_data[128],
    rd_valid,
    rdy,
    wr_rdy
  }
}

module mig_wrapper (
    inout ddr3_dq[16],
    inout ddr3_dqs_n[2],
    inout ddr3_dqs_p[2],
    output ddr3_addr[14],
    output ddr3_ba[3],
    output ddr3_ras_n,
    output ddr3_cas_n,
    output ddr3_we_n,
    output ddr3_reset_n,
    output ddr3_ck_p,
    output ddr3_ck_n,
    output ddr3_cke,
    output ddr3_cs_n,
    output ddr3_dm[2],
    output ddr3_odt,
    // Inputs
    // Single-ended system clock
    input              sys_clk,
    // Single-ended iodelayctrl clk (reference clock)
    input              clk_ref,
    // user interface signalsa
    input<Memory.in>   mem_in,
    output<Memory.out> mem_out,
    output             ui_clk,
    output             sync_rst,
    input		       sys_rst
  ) {
  
  mig_7series_0 mig(.ddr3_dq(ddr3_dq),.ddr3_dqs_n(ddr3_dqs_n),.ddr3_dqs_p(ddr3_dqs_p));
  
  always {
    ddr3_addr = mig.ddr3_addr;
    ddr3_ba = mig.ddr3_ba;
    ddr3_ras_n = mig.ddr3_ras_n;
    ddr3_cas_n = mig.ddr3_cas_n;
    ddr3_we_n = mig.ddr3_we_n;
    ddr3_reset_n = mig.ddr3_reset_n;
    ddr3_ck_p = mig.ddr3_ck_p;
    ddr3_ck_n = mig.ddr3_ck_n;
    ddr3_cke = mig.ddr3_cke;
    ddr3_cs_n = mig.ddr3_cs_n;
    ddr3_dm = mig.ddr3_dm;
    ddr3_odt = mig.ddr3_odt;
    
    mig.app_sr_req = 0;
    mig.app_ref_req = 0;
    mig.app_zq_req = 0;
    
    mig.app_wdf_data = mem_in.wr_data;
    mig.app_wdf_end = mem_in.wr_en;
    mig.app_wdf_wren = mem_in.wr_en;
    mig.app_wdf_mask = mem_in.wr_mask;
    mig.app_cmd = mem_in.cmd;
    mig.app_en = mem_in.en;
    mig.app_addr = mem_in.addr;
    
    mem_out.rd_data = mig.app_rd_data;
    mem_out.rd_valid = mig.app_rd_data_valid;
    mem_out.rdy = mig.app_rdy;
    mem_out.wr_rdy = mig.app_wdf_rdy;
    
    mig.sys_clk_i = sys_clk;
    mig.clk_ref_i = clk_ref;
    mig.sys_rst = sys_rst;
    
    sync_rst = mig.ui_clk_sync_rst;
    ui_clk = mig.ui_clk;
  }
}