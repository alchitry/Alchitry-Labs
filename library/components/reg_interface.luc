/******************************************************************************
   
   The MIT License (MIT)
   
   Copyright (c) 2019 Alchitry
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   
   *****************************************************************************
   
   This module provides a standardized way to interface with your design over
   the USB (virtual serial) port on the Mojo. It allows you to issue read and
   write commands to 32 bit addresses with 32 bits of data. The addresses can be
   used to index various parts of your design or even give access to actual
   memory.
*/

// global interface
global Register {
  struct master {                                 // master device outputs
    new_cmd,                                      // 1 = new command
    write,                                        // 1 = write, 0 = read
    address[32],                                  // address to read/write
    data[32]                                      // data to write (ignore on reads)
  }
  struct slave {                                  // slave device outputs
    data[32],                                     // data read from requested address
    drdy                                          // read data valid (1 = valid)
  }
}

module reg_interface #(
    CLK_FREQ = 50000000 : CLK_FREQ > 0
  )(
    input clk,                                    // clock
    input rst,                                    // reset
    
    // Serial RX Interface
    input rx_data[8],                             // data received
    input new_rx_data,                            // new data flag (1 = new data)
    
    // Serial Tx Interface
    output tx_data[8],                            // data to send
    output new_tx_data,                           // new data flag (1 = new data)
    input tx_busy,                                // transmitter is busy flag (1 = busy)
    
    // Register Interface
    output<Register.master> regOut,               // register outputs
    input<Register.slave> regIn                   // register inputs
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, GET_ADDR, WRITE, REQUEST_WRITE, REQUEST_READ, WAIT_READ, READ_RESULT};
    }
    
    dff addr_ct [6];                              // address counter
    dff byte_ct [2];                              // byte counter
    dff inc;                                      // increment flag
    dff wr;                                       // write flag
    dff timeout[$clog2(CLK_FREQ/4)];              // timeout counter
    dff addr [32];                                // saved address
    dff data [32];                                // saved data
    
  }
  
  always {
    // defaults
    regOut.new_cmd = 0;                           // no new command
    regOut.write = bx;                            // don't care
    regOut.address = addr.q;                      // output addr
    regOut.data = data.q;                         // output data
    tx_data = bx;                                 // don't care
    new_tx_data = 0;                              // no new data
    
    timeout.d = timeout.q + 1;                    // increment timeout counter
    if (new_rx_data)                              // if new serial data
      timeout.d = 0;                              // reset counter
    
    case (state.q) {
      state.IDLE:
        timeout.d = 0;                            // reset timeout
        byte_ct.d = 0;                            // reset byte count
        
        if (new_rx_data) {                        // if new data
          wr.d = rx_data[7];                      // bit 7 is write flag
          inc.d = rx_data[6];                     // bit 6 is auto increment flag
          addr_ct.d = rx_data[5:0];               // 7 LSBs are number of addresses to read/write (+1)
          state.d = state.GET_ADDR;               // read in address bytes
        }
      
      state.GET_ADDR:
        if (new_rx_data) {                        // if new data
          addr.d = c{rx_data, addr.q[31-:24]};    // shift in byte
          byte_ct.d = byte_ct.q + 1;              // increment byte count
          if (byte_ct.q == 3) {                   // if received all 4 bytes
            if (wr.q)                             // if write
              state.d = state.WRITE;              // switch to WRITE
            else                                  // else
              state.d = state.REQUEST_READ;       // switch to REQUEST_READ
          }
        }
      
      state.WRITE:
        if (new_rx_data) {                        // if new data
          data.d = c{rx_data, data.q[31-:24]};    // shift in data
          byte_ct.d = byte_ct.q + 1;              // increment byte count
          if (byte_ct.q == 3)                     // if received all 4 bytes
            state.d = state.REQUEST_WRITE;        // request the write
        }
      
      state.REQUEST_WRITE:
        regOut.new_cmd = 1;                       // new command!
        regOut.write = 1;                         // it's a write
        addr_ct.d = addr_ct.q - 1;                // decrement address count
        if (addr_ct.q == 0) {                     // if no more commands to issue
          state.d = state.IDLE;                   // return to idle
        } else {                                  // else
          state.d = state.WRITE;                  // read in other data to write
          if (inc.q)                              // if auto-increment
            addr.d = addr.q + 1;                  // increment the address
        }
      
      state.REQUEST_READ:
        regOut.new_cmd = 1;                       // new command!
        regOut.write = 0;                         // it's a read
        if (regIn.drdy) {                         // if result valid
          data.d = regIn.data;                    // save the value
          state.d = state.READ_RESULT;            // send it out
        } else {
          state.d = state.WAIT_READ;              // wait for the result
        }
      
      state.WAIT_READ:
        if (regIn.drdy) {                         // if result valid
          data.d = regIn.data;                    // save the value
          state.d = state.READ_RESULT;            // send it out
        }
      
      state.READ_RESULT:
        timeout.d = 0;                            // reset the timeout
        if (!tx_busy) {                           // if serial not busy
          tx_data = data.q[7:0];                  // write byte of data
          data.d = data.q >> 8;                   // shift data
          new_tx_data = 1;                        // send the byte
          byte_ct.d = byte_ct.q + 1;              // increase the byte counter
          if (byte_ct.q == 3) {                   // if we sent 4 bytes
            addr_ct.d = addr_ct.q - 1;            // decrement the number of reads to perform
            if (addr_ct.q == 0) {                 // if no more commands
              state.d = state.IDLE;               // return to IDLE
            } else {                              // else
              state.d = state.REQUEST_READ;       // request another read
              if (inc.q)                          // if auto-increment
                addr.d = addr.q + 1;              // increment the address
            }
          }
        }
    }
    
    if (&timeout.q)                               // if we timed out
      state.d = state.IDLE;                       // reset to IDLE
  }
}