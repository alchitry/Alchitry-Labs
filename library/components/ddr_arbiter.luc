/******************************************************************************
   
   The MIT License (MIT)
   
   Copyright (c) 2019 Alchitry
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   
   *****************************************************************************
   
   This is an arbiter for the DDR3 memory on the Alchitry Au.

   It takes the single memory interface to the MIG and creates DEVICES number
   of identically behaving interfaces. The interface 0 has the highest priority
   for any read or write commands. It is possible for a higher priority client to
   starve a lower priority one.
*/

module ddr_arbiter #(
    DEVICES = 2 : DEVICES > 1
  )(
    input clk,  // clock
    input rst,  // reset
    // Master
    output<Memory.in> master_in,
    input<Memory.out> master_out,
    // Devices
    input<Memory.in> device_in[DEVICES],
    output<Memory.out> device_out[DEVICES]
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {WAIT_CMD, WAIT_WRITE, WAIT_RDY};
      
      fifo fifo (#SIZE($clog2(DEVICES)), #DEPTH(256));
      dff device[$clog2(DEVICES)];
    }
  }
  
  var i, act;
  
  always {
    fifo.din = bx;
    fifo.wput = 0;
    fifo.rget = 0;
    
    master_in.en = 0;
    master_in.wr_data = bx;
    master_in.cmd = 0;
    master_in.wr_mask = 0;
    master_in.addr = bx;
    master_in.wr_en = 0;
    
    for (i = 0; i < DEVICES; i++) {
      device_out[i].rdy = 0;
      device_out[i].wr_rdy = 0;
    }
    
    case (state.q) {
      state.WAIT_CMD:
        act = 0;
        for (i = 0; i < DEVICES; i++) {
          if ((device_in[i].en || device_in[i].wr_en) && !act) {
            act = 1;
            device.d = i;
            master_in = device_in[i];
            device_out[i] = master_out;
            if (device_in[i].en && (device_in[i].cmd == 3b001)) { // read
              fifo.wput = 1;
              fifo.din = i;
              if (!master_out.rdy) {
                state.d = state.WAIT_RDY;
              }
            } else { // write
              if (!master_out.wr_rdy) {
                state.d = state.WAIT_WRITE;
              } else {
                state.d = state.WAIT_RDY;
              }
            }
          }
        }
      
      state.WAIT_WRITE:
        master_in = device_in[device.q];
        device_out[device.q] = master_out;
        if (master_out.wr_rdy) {
          if (device_in[device.q].en && master_out.rdy) {
            state.d = state.WAIT_CMD;
          } else {
            state.d = state.WAIT_RDY;
          }
        }
      
      state.WAIT_RDY:
        master_in = device_in[device.q];
        device_out[device.q] = master_out;
        if (master_out.rdy) {
          state.d = state.WAIT_CMD;
        }
    }
    
    for (i = 0; i < DEVICES; i++) {
      device_out[i].rd_data = bx;
      device_out[i].rd_valid = 0;
    }
    
    if (master_out.rd_valid) {
      device_out[fifo.dout].rd_data = master_out.rd_data;
      device_out[fifo.dout].rd_valid = 1;
      fifo.rget = 1;
    }
  }
}