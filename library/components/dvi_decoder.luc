/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

module dvi_decoder (
    input tmds[4],
    input tmdsb[4],
    input rst,
    
    output pll_locked,
    output pclk,
    output pclkx2,
    output pclkx10,
    output strobe,
    
    output hsync,
    output vsync,
    output de,
    
    output red[8],
    output green[8],
    output blue[8]
    
  ) {
  
  xil_IBUFDS bufds (.I(tmds[3]),.IB(tmdsb[3]));
  
  sig fbout;
  xil_PLL_BASE pll (
    #CLKIN_PERIOD(13),
    #CLKFBOUT_MULT(10),
    #CLKOUT0_DIVIDE(1),
    #CLKOUT1_DIVIDE(10),
    #CLKOUT2_DIVIDE(5),
    #COMPENSATION("INTERNAL"),
    .CLKIN(bufds.O),
    .RST(rst),
    .CLKFBIN(fbout)
  );
  
  always fbout = pll.CLKFBOUT;
  
  xil_BUFG pclkbufg(.I(pll.CLKOUT1));
  xil_BUFG pclkx2bufg(.I(pll.CLKOUT2));
  
  xil_BUFPLL bufpll (#DIVIDE(5), .PLLIN(pll.CLKOUT0), .GCLK(pclkx2bufg.O), .LOCKED(pll.LOCKED));
  
  .rst(!bufpll.LOCK),
  .pclk(pclkbufg.O),
  .pclkx2(pclkx2bufg.O),
  .pclkx10(bufpll.IOCLK),
  .strobe(bufpll.SERDESSTROBE){
    tmds_decoder dec_r;
    tmds_decoder dec_g;
    tmds_decoder dec_b;
  }
  
  always {
    dec_r.data_p = tmds[2];
    dec_r.data_n = tmdsb[2];
    dec_g.data_p = tmds[1];
    dec_g.data_n = tmdsb[1];
    dec_b.data_p = tmds[0];
    dec_b.data_n = tmdsb[0];
    
    dec_r.others_ready = dec_g.ready & dec_b.ready;
    dec_g.others_ready = dec_r.ready & dec_b.ready;
    dec_b.others_ready = dec_r.ready & dec_g.ready;
    
    dec_r.others_valid = dec_g.valid & dec_b.valid;
    dec_g.others_valid = dec_r.valid & dec_b.valid;
    dec_b.others_valid = dec_r.valid & dec_g.valid;
    
    pll_locked = bufpll.LOCK;
    pclk = pclkbufg.O;
    pclkx2 = pclkx2bufg.O;
    pclkx10 = bufpll.IOCLK;
    strobe = bufpll.SERDESSTROBE;
    
    hsync = dec_b.c0;
    vsync = dec_b.c1;
    de = dec_b.de;
    
    red = dec_r.data;
    green = dec_g.data;
    blue = dec_b.data;
  }
}