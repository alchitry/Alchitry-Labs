/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************

   Wave: This module generates the fancy wave
   pattern for the default program loaded on 
   the Mojo. Changing CTR_LEN will change how
   fast it goes.
*/

module wave #(
    CTR_LEN = 25 : CTR_LEN >= 9
  )(
    input clk,     // clock
    input rst,     // reset
    output out[8]  // LED output
  ) {
  
  // counter
  dff ctr[CTR_LEN](.clk(clk),.rst(rst));
  
  var i;         // for loop var
  sig acmp[8];   // intermediate value
  sig result[9]; // intermediate value
  
  always {
    // increment the counter
    ctr.d = ctr.q +1;
    
    // for each output
    for (i = 0; i < 8; i++) {
      // take the top bits of the counter and
      // offset differently them for each output
      result = ctr.q[CTR_LEN-1-:9] + i * 8d64;
      
      // if the MSB is 1
      if (result[8])
        // invert the result to count down
        acmp = ~result[7:0];
      else // otherwise
        // leave it alone to count up
        acmp = result[7:0];
      
      // PWM output
      out[i] = acmp > ctr.q[7:0];
    }
  }
}