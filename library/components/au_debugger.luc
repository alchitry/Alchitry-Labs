module au_debugger #(
    DATA_WIDTH = 8 : DATA_WIDTH > 0 && DATA_WIDTH.WIDTH <= 32,            // number of signals to capture
    CAPTURE_DEPTH = 256 : CAPTURE_DEPTH > 0 && CAPTURE_DEPTH.WIDTH <= 32, // samples per capture
    NONCE = 0 : NONCE.WIDTH <= 32                                         // project nonce
  )(
    input clk,  // clock
    input data[DATA_WIDTH]                              // signals to capture
  ) {
  
  const VERSION = 3;
  
  xil_BSCANE2 info_scan (#JTAG_CHAIN(1));
  xil_BSCANE2 config_scan (#JTAG_CHAIN(2));
  xil_BSCANE2 data_scan (#JTAG_CHAIN(3));
  xil_BSCANE2 capture_scan(#JTAG_CHAIN(4));
  
  sig rst;
  reset_conditioner reset_conditioner (.clk(clk), .in(info_scan.RESET));
  always rst = reset_conditioner.out;
  
  .clk(info_scan.TCK) {
    dff status[8+32+32+32];
  }
  
  async_fifo config_fifo (#SIZE(1), #DEPTH(8), .wclk(config_scan.TCK), .wrst(0), .rclk(clk), .rrst(0));
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, ARMED, FIRED, CAPTURED};             // states
      dff waddr [$clog2(CAPTURE_DEPTH)];                      // write address
    }
    dff data_old[DATA_WIDTH];                                 // old data for edge detection
    dff trigger_data[4*DATA_WIDTH];
    pipeline arm_sync (#DEPTH(2));
    pipeline force_sync (#DEPTH(2));
  }
  
  .clk(data_scan.TCK) {
    dff raddr [$clog2(CAPTURE_DEPTH)];                      // read address
    dff offset[$clog2(DATA_WIDTH)];
    dff rdata[DATA_WIDTH];
  }
  
  .clk(capture_scan.TCK) {
    pipeline status_sync (#DEPTH(2));
    .rst(!capture_scan.SEL) {
      dff force;
    }
  }
  
  simple_dual_ram ram (#SIZE(DATA_WIDTH), #DEPTH(CAPTURE_DEPTH), .rclk(data_scan.TCK), .wclk(clk));
  
  var i;
  sig triggered; // used to start a capture
  sig trigger_type[DATA_WIDTH][4];
  
  always {
    /* Info Scan - full JTAG clock domain */
    if (info_scan.SEL) {
      if (info_scan.CAPTURE) {
        status.d = c{$resize(VERSION,8), $resize(CAPTURE_DEPTH,32), $resize(DATA_WIDTH,32), $resize(NONCE,32)};
      } else if (info_scan.SHIFT) {
        status.d = c{status.q[0], status.q[status.WIDTH-1:1]};
      }
    }
    info_scan.TDO = status.q[0];
    
    /* Config Scan */
    // JTAG clock domain
    config_fifo.din = config_scan.TDI;
    config_fifo.wput = config_scan.SHIFT & config_scan.SEL;
    config_scan.TDO = 0;
    
    // system clock domain
    config_fifo.rget = 1;
    if (!config_fifo.empty)
      trigger_data.d = c{config_fifo.dout, trigger_data.q[trigger_data.WIDTH-1:1]};
    
    /* Data Scan */
    // system clock domain
    ram.waddr = waddr.q;                                      // connect RAM ports
    ram.write_data = data;
    ram.write_en = 0;
    
    data_old.d = data;
    
    trigger_type = $build(trigger_data.q, DATA_WIDTH);
    
    case (state.q) {
      state.IDLE:
        waddr.d = 0;
        
        if (arm_sync.out)
          state.d = state.ARMED;
        
      state.ARMED:                                            // armed and waiting for a trigger
        triggered = 1;                                        // assume triggered
        
        // Check if each signal meets trigger requirements, if any don't triggered is set to 0
        for (i = 0; i < DATA_WIDTH; i++){
          triggered = triggered & (
            (trigger_type[i][0] && data_old.q[i] == 0 && data[i] == 1) || // rise
            (trigger_type[i][1] && data_old.q[i] == 1 && data[i] == 0) || // fall
            (trigger_type[i][2] && data[i] == 0) ||                       // low
            (trigger_type[i][3] && data[i] == 1) ||                       // high
            trigger_type[i] == 4b0);                                      // no trigger
        }
        
        if (triggered || force_sync.out) {                    // if a trigger occured (or forced by JTAG)
          ram.write_en = 1;                                   // capture the current data
          state.d = state.FIRED;                              // switch to FIRED state
          waddr.d = waddr.q + 1;                              // advance the write address
        }
      
      state.FIRED:                                            // capturing data
        waddr.d = waddr.q + 1;                                // advance the write address
        ram.write_en = 1;                                     // capture the current data
        if (waddr.q == CAPTURE_DEPTH - 1) {                   // if we are at the last sample
          state.d = state.CAPTURED;                           // switch to CAPTURED state
        }
    }
    
    // JTAG clock domain
    ram.raddr = raddr.q;
    data_scan.TDO = rdata.q[0];
    if (data_scan.SEL) {
      if (data_scan.CAPTURE) {
        rdata.d = ram.read_data;
        raddr.d = raddr.q + 1;
        offset.d = 0;
      } else if (data_scan.SHIFT) {
        rdata.d = c{1b0, rdata.q[rdata.WIDTH-1:1]};
        offset.d = offset.q + 1;
        if (offset.q == DATA_WIDTH-1) {
          offset.d = 0;
          rdata.d = ram.read_data;
          raddr.d = raddr.q + 1;
        }
      } else {
        raddr.d = 0;
      }
    }
    
    /* Capture Scan */
    // system clock domain
    status_sync.in = state.q == state.CAPTURED;
    
    // JTAG clock domain
    capture_scan.TDO = status_sync.out;
    arm_sync.in = 0;
    force_sync.in = force.q;
    if (capture_scan.SEL) {
      arm_sync.in = capture_scan.SHIFT | capture_scan.CAPTURE;
      if (capture_scan.SHIFT) {
        force.d = force.q | capture_scan.TDI;
      }
    }
  }
}